<?php
/**
 * @copyright 2015 City of Bloomington, Indiana
 * @license http://www.gnu.org/licenses/agpl.txt GNU/AGPL
 * @author Cliff Ingham <inghamn@bloomington.in.gov>
 */
require_once __DIR__.'/civiclegislation.admin.inc';
require_once __DIR__.'/civiclegislation.fields.inc';

function civiclegislation_libraries_info()
{
    return ['chemistry' => [
        'name'             => 'COB Fork of Chemistry PHP CMIS library',
        'vendor url'       => 'http://github.com/City-of-Bloomington/chemistry-phpclient',
        'download url'     => 'http://github.com/City-of-Bloomington/chemistry-phpclient',
        'files' => [
            'php' => [
                'browser/cmis_service.php'
            ]
        ],
        'version callback' => 'chemistry_version_callback',
    ]];
}
function chemistry_version_callback() { return true; }


function civiclegislation_menu()
{
    return [
        'admin/config/services/civiclegislation' => [
            'title'            => 'Civic Legislation settings',
            'description'      => 'Settings for the boards and committees module',
            'page callback'    => 'drupal_get_form',
            'page arguments'   => ['civiclegislation_admin_form'],
            'access arguments' => ['administer site configuration'],
            'type'             => MENU_NORMAL_ITEM
        ],
        'node/%node/%' => [
            'title'            => 'Document Index',
            'description'      => 'Browsable index of documents from Alfresco.',
            'page callback'    => 'civiclegislation_document_index',
            'page arguments'   => [1, 2],
            'access arguments' => ['access content']
        ],
        'node/%node/download/%' => [
            'title'            => 'Document Download',
            'description'      => 'Download a document stored in Alfresco.',
            'page callback'    => 'civiclegislation_document_download',
            'page arguments'   => [1, 3],
            'access arguments' => ['access content']
        ]
    ];
}

function civiclegislation_document_index($node, $documentType, $year=null)
{
    $knownTypes = [
        'meetings'    => 'meeting',
        'records'     => 'record',
        'legislation' => 'legislation'
    ];


    if (!empty(   $node->field_cmis_documents['und'][0]["doctypes_$documentType"])) {
        $folder = $node->field_cmis_documents['und'][0]['folder'];

        $namespace_short = 'D:cob:';
        $namespace_long  = '{http://bloomington.in.gov/alfresco/model}';
        $dateField       = "date@sd@{$namespace_long}{$knownTypes[$documentType]}Date";
        $year = $year ? $year : date('Y');

        $types  = explode(',', $node->field_cmis_documents['und'][0]["doctypes_$documentType"]);
        $types_cmis = [];
        $types_solr = [];
        foreach ($types as $type) {
            // Quote the types for CMIS queries
            $types_cmis[] = '\''.trim($type).'\'';
            // Expand the COB namespace for Solr queries
            $types_solr[] = str_replace($namespace_short, $namespace_long, $type);
        }
        $types_cmis = implode(','   , $types_cmis);

        $cmis = _civiclegislation_cmis_documents($folder, $types_cmis, $year);
        $solr = _civiclegislation_solr_years    ($folder, $types_solr, $dateField);

        $solr = json_decode($solr);
        if ($solr) {
            return theme('civiclegislation_documents', [
                'types'=>$types, 'year'=>$year, 'node'=>$node,
                'documents' => $cmis->results,
                'years'     => $solr->facet_counts->facet_ranges->$dateField->counts,
                'namespace' => $namespace_short
            ]);
        }
        else {
            return json_last_error_msg();
        }
    }
}

function civiclegislation_document_download($node, $objectId)
{
    $cmis = _civiclegislation_get_cmis();
    $o = $cmis->getObject($objectId);

    $mime = $o->succinctProperties->{'cmis:contentStreamMimeType'};
    $file = $o->succinctProperties->{'cmis:contentStreamFileName'};
    $size = $o->succinctProperties->{'cmis:contentStreamLength'};

    header("Content-Type: $mime");
    header("Content-Disposition: attachment; filename=\"$file\"");
    header("Content-Length: $size");
    echo $cmis->getContentStream($objectId);
}

/**
 * @param int $committee_id
 * @return stdClass The json object
 */
function civiclegislation_committee_info($committee_id)
{
    $url = variable_get('civiclegislation_url').'/committees/view?format=json;committee_id='.$committee_id;
    $r   = _civiclegislation_get($url);
    return json_decode($r);
}

/**
 * @implements hook_theme()
 * @see https://www.drupal.org/node/933976
 */
function civiclegislation_theme()
{
    return [
        'civiclegislation_documents'=> [
            'template' => 'civiclegislation_documents',
            'variables' => [
                'documents'=>null, 'types'=>null, 'year'=>null, 'years'=>null, 'namespace'=>null
            ]
        ]
    ];
}


/**
 * Instantantiates the CMISService using variables from the admin form
 *
 * @return CMISService
 */
function _civiclegislation_get_cmis()
{
    static $cmis;

    if (!$cmis) {
        libraries_load('chemistry');

        $cmis = new CMISService(
            variable_get('civiclegislation_cmis_url'),
            variable_get('civiclegislation_cmis_username'),
            variable_get('civiclegislation_cmis_password'),
            variable_get('civiclegislation_cmis_repositoryId')
        );
        $cmis->succinct = true;
    }
    return $cmis;
}

/**
 * @param string $url
 * @return string
 */
function _civiclegislation_get($url)
{
    $session = curl_init($url);
    curl_setopt($session, CURLOPT_HEADER,         false);
    curl_setopt($session, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($session, CURLOPT_FOLLOWLOCATION, true);
    if (substr($url, 0, 5) == 'https') {
        curl_setopt($session, CURLOPT_SSL_VERIFYHOST, false);
        curl_setopt($session, CURLOPT_SSL_VERIFYPEER, false);
        curl_setopt($session, CURLOPT_SSLVERSION, 3);
    }
    return curl_exec($session);
}


/**
 * Adds slashes in front of special characters used in Solr queries
 *
 * @param string $string
 * @return string
 */
function _civiclegislation_solr_escape($string)
{
    return str_replace(
        [chr(92),          '+',  '-',  '&',  '|',  '!',  '(',  ')',  '{',  '}',  '[',  ']',  '^',  '"',  '~',  '*',  '?',  ':',  '/'],
        [chr(92).chr(92), '\+', '\-', '\&', '\|', '\!', '\(', '\)', '\{', '\}', '\[', '\]', '\^', '\"', '\~', '\*', '\?', '\:', '\/'],
        $string
    );
}

/**
 * @param string $folder The CMIS:ObjectId of a folder
 * @param array $types The array of fully namespaced names for the types
 * @param string $dateField Fully namespaced name for the date field
 * @return string The raw http response from Solr
 */
function _civiclegislation_solr_years($folder, $types, $dateField)
{
    foreach ($types as $i=>$t) {
        $types[$i] = 'TYPE:'._civiclegislation_solr_escape($t);
    }

    $params = [
        'q'       => '*:*',
        'start'   => 0,
        'rows'    => 0,
        'wt'      => 'json',
        'json.nl' => 'map',
        'indent'  => 'true',
        'facet'   => 'true',
        'facet.field'       => $dateField,
        'facet.range'       => $dateField,
        'facet.range.gap'   => '+1YEAR',
        'facet.range.start' => '1980-01-01T00:00:00Z',
        'facet.range.end'   => 'NOW',
        'facet.mincount'    => 1
    ];
    $p = http_build_query($params, null, '&');
    $p.='&fq='.urlencode('ANCESTOR:'._civiclegislation_solr_escape("workspace://SpacesStore/$folder"));
    $p.='&fq='.urlencode(implode(' OR ', $types));
    $url = variable_get('civiclegislation_solr_url')."/select?$p";
    return _civiclegislation_get($url);
}

function _civiclegislation_cmis_documents($folder, $types, $year)
{
    $start = strtotime("$year-01-01") * 1000;
    $end   = strtotime("$year-12-31") * 1000;

    $sql =  "select * from cob:meetingfile
                where in_tree('$folder')
                and cmis:objectTypeId in ($types)
                and cob:meetingDate >= $start and cob:meetingDate <= $end
                order by cob:meetingDate desc";

    $cmis = _civiclegislation_get_cmis();
    return $cmis->query($sql);
}
